/*
Copyright Sahadat Hossain

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/shahincsejnu/extend-k8s-API-with-CRD/pkg/apis/shahin.oka.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TeploymentLister helps list Teployments.
// All objects returned here must be treated as read-only.
type TeploymentLister interface {
	// List lists all Teployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Teployment, err error)
	// Teployments returns an object that can list and get Teployments.
	Teployments(namespace string) TeploymentNamespaceLister
	TeploymentListerExpansion
}

// teploymentLister implements the TeploymentLister interface.
type teploymentLister struct {
	indexer cache.Indexer
}

// NewTeploymentLister returns a new TeploymentLister.
func NewTeploymentLister(indexer cache.Indexer) TeploymentLister {
	return &teploymentLister{indexer: indexer}
}

// List lists all Teployments in the indexer.
func (s *teploymentLister) List(selector labels.Selector) (ret []*v1alpha1.Teployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Teployment))
	})
	return ret, err
}

// Teployments returns an object that can list and get Teployments.
func (s *teploymentLister) Teployments(namespace string) TeploymentNamespaceLister {
	return teploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TeploymentNamespaceLister helps list and get Teployments.
// All objects returned here must be treated as read-only.
type TeploymentNamespaceLister interface {
	// List lists all Teployments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Teployment, err error)
	// Get retrieves the Teployment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Teployment, error)
	TeploymentNamespaceListerExpansion
}

// teploymentNamespaceLister implements the TeploymentNamespaceLister
// interface.
type teploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Teployments in the indexer for a given namespace.
func (s teploymentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Teployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Teployment))
	})
	return ret, err
}

// Get retrieves the Teployment from the indexer for a given namespace and name.
func (s teploymentNamespaceLister) Get(name string) (*v1alpha1.Teployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("teployment"), name)
	}
	return obj.(*v1alpha1.Teployment), nil
}
